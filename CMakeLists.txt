cmake_minimum_required(VERSION 3.25.2 FATAL_ERROR)
set(CMAKE_USER_MAKE_RULES_OVERRIDE_CXX ${CMAKE_CURRENT_SOURCE_DIR}/cmake/cxx_flag_overrides.cmake)

cmake_policy(SET CMP0091 NEW)
cmake_policy(SET CMP0092 NEW)

project(ETrunner CXX)

set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED YES)

set(BUILD_SHARED_LIBS OFF)

set(CPACK_GENERATOR "ZIP")

if(WIN32)
    set(OS_SELECTOR "win")
    set(OS_DLL_EXTENSION "dll")
elseif(UNIX)
    set(OS_SELECTOR "lin")
    set(OS_DLL_EXTENSION "so")

    set(CMAKE_INSTALL_RPATH "$ORIGIN")
else(WIN32)
    message(FATAL_ERROR "Your OS is not supported")
endif(WIN32)

if("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
    set(BUILD_TYPE "Debug")
    add_definitions(-D_DEBUG)
    add_definitions(-DTBB_USE_DEBUG=1)
else("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
    set(BUILD_TYPE "Release")
endif("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")

find_package(Boost REQUIRED)
find_package(cpp_runtime REQUIRED)
find_package(ZLIB REQUIRED)
find_package(TBB REQUIRED)
find_package(pugixml REQUIRED)
find_package(GTest REQUIRED)

add_definitions(-DUNICODE)
add_definitions(-D_UNICODE)
add_definitions(-DU_DEFINE_FALSE_AND_TRUE)
add_definitions(-DBOOST_ALL_NO_LIB)
add_definitions(-DBOOST_AUTO_LINK_NOMANGLE)
add_definitions(-DBOOST_BIND_NO_PLACEHOLDERS)
add_definitions(-DBOOST_FILESYSTEM_NO_DEPRECATED)
add_definitions(-DBOOST_SPIRIT_UNICODE)
add_definitions(-DBOOST_THREAD_DONT_PROVIDE_NESTED_LOCKS)
add_definitions(-DBOOST_THREAD_USES_DATETIME)
add_definitions(-DBOOST_THREAD_VERSION=4)
add_definitions(-DGTEST_HAS_TR1_TUPLE=0)
add_definitions(-DSA_UNICODE=1)
add_definitions(-DPUGIXML_HEADER_ONLY)
add_definitions(-DTHREADED)
add_definitions(-DUSE_STATIC_LIB)

if(WIN32)
 #       if("${CMAKE_BUILD_TYPE}" STREQUAL "RelWithDebInfo")
 #           add_compile_options(/debug:inline-debug-info)
 #       endif("${CMAKE_BUILD_TYPE}" STREQUAL "RelWithDebInfo")

    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
    add_definitions(-D_ENABLE_EXTENDED_ALIGNED_STORAGE)
    add_definitions(-DNOMINMAX)
    add_definitions(-D_SCL_SECURE_NO_WARNINGS)
    add_definitions(-D_WIN32_WINNT=0x0A00)
    add_definitions(-DWIN32_LEAN_AND_MEAN)

    add_compile_options(/bigobj)
    add_compile_options(/J)
    add_compile_options(/fp:strict)
    add_compile_options(/std:c++latest)
    add_compile_options(/MP)
    add_compile_options(/Wall)
    add_compile_options(/wd4514)
    add_compile_options(/wd4625)
    add_compile_options(/wd4626)
    add_compile_options(/wd4710)
    add_compile_options(/wd4711)
    add_compile_options(/wd4820)
    add_compile_options(/wd5026)
    add_compile_options(/wd5027)
    add_compile_options(/wd5045)
    add_compile_options(/wd5204)
    add_compile_options(/wd6326)
    add_compile_options(/WX)

    add_compile_options(/analyze:external-)
    add_compile_options(/external:anglebrackets)
    add_compile_options(/external:W0)
elseif(APPLE OR UNIX)
#    add_definitions(-D_FORTIFY_SOURCE=0)

    add_compile_options(-march=core2)
    add_compile_options(-msse2)

    add_compile_options(-std=c++${CMAKE_CXX_STANDARD})
    add_compile_options(-funsigned-char)
    add_compile_options(-frounding-math)
    add_compile_options(-fsignaling-nans)
    add_compile_options(-ffp-contract=off)
    add_compile_options(-ffloat-store)
    add_compile_options(-fno-stack-protector)
    add_compile_options(-fno-var-tracking-assignments)
    add_compile_options(-flto-odr-type-merging)
    add_compile_options(-fpermissive)
    add_compile_options(-m64)
    add_compile_options(-mfpmath=sse)
    add_compile_options(-fmessage-length=0)
    add_compile_options(-Wall)
    add_compile_options(-Wextra)
    add_compile_options(-Wconversion)
    add_compile_options(-Wfloat-conversion)
    add_compile_options(-Wsign-conversion)
    add_compile_options(-Wshadow)
    add_compile_options(-Werror)
    add_compile_options(-pedantic)
    add_compile_options(-pedantic-errors)

    add_compile_options(-pthread)

    add_link_options(-no-pie)
endif(WIN32)

add_subdirectory(src)
